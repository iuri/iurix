text/html {<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;" class=""><div><blockquote type="cite" class=""><div class="">Thread: <a href="https://openacs.org/forums/message-view?message_id=5422900" class="">XML request Versus SOAP response</a><br class=""><br class="">
Are you interested in using a client to interact with an existing service, or are you trying to setup a server on OpenACS to respond to client requests?<p class="">The best tcl client is tclws as mentioned by Claudio Pasolini. I think my server is better overall. The software is available on gitHub:</p><p class=""><a href="https://github.com/russell-todd-sorensen/twist" class="">https://github.com/russell-todd-sorensen/twist</a></p><p class="">You can see a service in action at:<br class=""><a href="https://www.semitasker.com/twist/ws/openacs/" class="">https://www.semitasker.com/twist/ws/openacs/</a>
</p><p class="">The file you write to create the above service is this (saved as index.tcl somewhere under pageroot):</p><p class="">#â Examples Using OpenACS data types:<br class="">
#â Regular expressions were taken from <a href="http://openacs.org" class="">openacs.org</a>, and<br class="">
#â use is covered by their license.<br class="">
&lt;ws&gt;namespace init ::openacs</p><p class="">#â Initialize Schema<br class="">
&lt;ws&gt;namespace schema ::openacs &amp;#â34;<a href="https://www.semitasker.com/twist/ws/openacs/" class="">https://www.semitasker.com/twist/ws/openacs/</a>&amp;#â34;</p><p class="">#â#â#â Simple Types</p><p class="">#â Phone<br class="">
&lt;ws&gt;type pattern openacs::phone {^\(?([1-9][0-9]{2})\)?(-|\.|\ )?([0-9]{3})(-|\.|\ )?([0-9]{4})};</p><p class="">#â Email<br class="">
&lt;ws&gt;type pattern openacs::email&nbsp; {^[^@\t ]+@[^@.\t]+(\.[^@.\n ]+)+$};</p><p class="">#â NaturalNum<br class="">
&lt;ws&gt;type pattern openacs::naturalNum {^(0*)(([1-9][0-9]*|0))$} xsd::integer</p><p class="">#â Operations for the service:<br class="">
&lt;ws&gt;proc ::openacs::CheckEmail {<br class="">
&nbsp; &nbsp; {Email:openacs::email}<br class="">
} {<br class="">
&nbsp; &nbsp; return [list &amp;#â34;$Email&amp;#â34; &amp;#â34;True&amp;#â34;]<br class="">
} returns {Email:openacs::email IsEmail:boolean}</p><p class="">&lt;ws&gt;proc ::openacs::CheckPhone {<br class="">
&nbsp; &nbsp; {Phone:openacs::phone}<br class="">
} {<br class="">
&nbsp; &nbsp; return [list $Phone True]<br class="">
} returns {Phone:openacs::phone IsPhone:boolean}</p><p class="">&lt;ws&gt;proc ::openacs::CheckNaturalNumber {<br class="">
&nbsp; &nbsp; {NaturalNumber:openacs::naturalNum}<br class="">
} {<br class="">
&nbsp; &nbsp; return [list $NaturalNumber True]<br class="">
} returns {NaturalNumber:openacs::naturalNum IsNaturalNum:boolean}</p><p class="">&lt;ws&gt;namespace finalize ::openacs</p><p class="">&lt;ws&gt;namespace freeze ::openacs</p><p class="">&lt;ws&gt;return ::openacs</p><p class="">Additional running examples are here:<br class=""><a href="https://www.semitasker.com/twist/ws/datetime/" class="">https://www.semitasker.com/twist/ws/datetime/</a><br class=""><a href="https://www.semitasker.com/twist/ws/mywebservice/" class="">https://www.semitasker.com/twist/ws/mywebservice/</a><br class=""><a href="https://www.semitasker.com/twist/ws/stockquoter/" class="">https://www.semitasker.com/twist/ws/stockquoter/</a><br class=""><a href="https://www.semitasker.com/twist/ws/stockquoter2/" class="">https://www.semitasker.com/twist/ws/stockquoter2/</a>
</p><p class="">You will be limited to document/literal but I have been considering putting in a json to json adapter.</p><p class="">These example services also expose some of the client functionality. If you click on one of the operation links, you are presented with an auto-generated form. Fill out the form and it is sent as a GET request to the server. This is converted into a client SOAP/document/literal format and resubmitted to the same url as a POST. I never got around to exploiting this, but it would be relatively straightforward to create a proxy service.</p><div class="">   <br class="webkit-block-placeholder"></div><p class="">Getting too much email? Manage your notifications at: <a href="https://openacs.org/notifications/manage" class="">https://openacs.org/notifications/manage</a></p></div></blockquote></div><br class=""></body></html>}