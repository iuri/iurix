ad_library {
    @author Iuri Sampaio (iuri@iurix.com)
    creation-date 2020-03-19
}

namespace eval ix_selic {}
namespace eval ix_selic::rates {}




ad_proc -public ix_selic::rates::get_acumulated_rate {
    {-date}
    {-type}
} {
    It return the rate based in the date and type of rate
    
} {


    #set pivot_month_lavratura [db_string select_month_lavr { SELECT extract(month FROM timestamp :dl) FROM dual  } -default ""]
    #set pivot_year_lavratura [db_string select_year_lavr { SELECT extract(year FROM timestamp :dl) FROM dual  } -default ""]


    
#    set  curr_rate [db_string select_rate {
#	SELECT rate FROM ix_selic_rates
#	WHERE EXTRACT(month FROM date) = EXTRACT(month FROM :date::timestamp)

    #AND EXTRACT(year FROM date) = EXTRACT(year FROM :date::timestamp)
#	AND type = :type	
 #   } -default 0]

 #   ns_log Notice "RATE ACUMU $curr_rate' | $next_rate = [expr $curr_rate $next_rate]"

    #    return [expr $curr + $next]
    
    return [db_string select_rate {
	SELECT SUM(rate) FROM ix_selic_rates
	WHERE type = :type
	AND date BETWEEN :date::timestamp AND now()
    } -default 0]
}





ad_proc -public ix_selic::rates::get_rate {
    {-date}
    {-type}
} {
    It return the rate based in the date and type of rate
    
} {   
    return [db_string select_rate {
	SELECT rate FROM ix_selic_rates
	WHERE EXTRACT(month FROM date) = EXTRACT(month FROM :date::timestamp)
	AND EXTRACT(year FROM date) = EXTRACT(year FROM :date::timestamp)
	AND type = :type	
    } -default 0]
}


ad_proc -public ix_selic::rates::add {
    {-lines}
    {-type}
} {
    It parses and inserts lines of rates per month and year
    
} {
    
    set years [split [lindex $lines 0] ","]
    ns_log Notice "YEARS $years"    
    
    # For each line(i.e. month) gets year and rate, then inserts on datamodel table
    for {set i 1} {$i < [llength $lines]} {incr i} {
	ns_log Notice "LINE [lindex $lines $i]"
	set line [split [lindex $lines $i] ","]
	if { [string map {"," ""} $line] ne ""} {
	    if {[llength $line] > 0} {	    
		set month [lindex $line 0]	    
		if {[exists_and_not_null month] } {
		    ns_log Notice "MONTH $month"
		    set l_months [list "zero" "janeiro" "fevereiro" "mar√ßo" "abril" "maio" "junho" "julho" "agosto" "setembro" "outubro" "novembro" "dezembro"]
		        	    
		    # for each rate of the month (i.e. position [0] of the line. $line(0)
		    for {set j 1} {$j < [llength $line]}  {incr j} {
			set rate [string map {"%" ""} [lindex $line $j]]
			set date "[lindex $years $j]-[lsearch $l_months $month]-01"
			ns_log Notice "RATE: $rate | DATE: $date "
			if {[exists_and_not_null rate] && [exists_and_not_null date]} {

			    # UPDATE RATE OR    # INSERT RATE and DATE
			    # TO CREATE validatons of rates based in the month and year. if there is one then update it instead of insert a  new rate
			    
			    db_transaction {
				db_exec_plsql insert_selic_rate {
				    SELECT ix_selic_rate__new(:rate,:type,:date)
				}
			    } on_error {
				ns_log notice "AIGH! something bad happened! $errmsg"
				ns_log Notice "ERROR CRETING SELIC RATE *****"
			    }
			} else {
			    ns_log Notice "RATE IS VOID!"
			    return 1	
			}       	
		    }
		} else {
		    ns_log Notice "MONTH IS VOID!"
		    return 1
		}
	    }
	} else {
	    ns_log Notice  "LINE IS VOID"
	    return 1
	}
    }
    return 0
}
